iterate next init = loop init [ recur x => .cons x ~(recur (next x)) ]

nats = iterate (add 1) 0

next (.p stream seen) =
  stream
  > drop-while [ n => seen
                    > take-while [ mul $ $ > lte n ]
                    > any (divides n) ]
  > [ (head $, .p (tail $)
                  (seen > union (head $))) ]

primes-from stream = ~(next-prime st > (n, st) => .cons n (primes-from st))

primes = primes-from (.p (drop 2 nats) Set.empty)

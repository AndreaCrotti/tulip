@object Reply pid id [
  reply msg = Prelude/send pid (id, msg)
  receive f = Prelude/receive [ (_ ? eq id, x) => f x ]
  receive! = receive [ x => x ]
  send msg = Prelude/send (id, msg)
]

make-reply! = Reply self! make-id!

# prelude.tlp
send-wait pid msg = {
  r = make-reply!
  send pid (r, msg)
  r/receive!
}

# ref.tlp
@module ref

ref value = Ref (spawn [ ! => loop value ])

loop value = receive [
  .set new-value => loop new-value
  r, .get => { r/reply value; loop value }
  r, .modify f =>
     try f value
     > tee r/reply
     > [ .some new-value => loop new-value; .none => loop value ]
  ]
]

@object Ref pid [
  set val = .set val > send pid
  get! = .get > send-wait pid
  modify f = .modify f > send-wait pid
]

# repl
: r = ref 10
= *<ref/Ref *<Pid 5>>
: r/get!
= 10
: r/set 20
= .ok
: r/get!
= 20
: r/modify (add 10)
= .ok
: r/modify [ (x: %str) => '{it's a string} ]
= .ok

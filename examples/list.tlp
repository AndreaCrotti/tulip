@module list

@check %list = [ .cons _ %list; .nil ]

@impl map f (xs:.cons _ _) = map-list f xs
@impl map f .nil = .nil

map-list f xs = {
  map-step (.nil) out = out
  map-step (.cons x xs) out = map-step xs (.cons (f x) out)
  map-step xs .nil
}

loop init step = {
  recur x = step x recur
  recur init
}

loop-trace init step = loop init [ x recur => (print x; step x recur) ]

foldl f init list = loop (init, list) [
  (accum, .cons x xs) recur => recur (f x accum, xs)
  (accum, .nil)       recur => accum
]

foldr f final list = {
  k = [
    .cons x xs => f x ~(k xs)
    .nil => final
  ]

  k list
}

find f = foldr .none [ x rest => f x > [ .t => .some x; .f => rest ] ]

take 0 _ = /[]
take n .nil = /[]
take n (.cons x xs) = .cons x ~(take (decr n) xs)
